import math

class bucket:
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.min = None
        self.max = None
        self.count = 0

    def add(self, n):
        assert n>=self.start and n<=self.end, "n={0:d} not in ({1:d},{2:d})".format(n,self.start,self.end)
        if self.min is None or self.min > n:
            self.min = n
        if self.max is None or self.max < n:
            self.max = n
        self.count = self.count+1

    def maxDiff(self, other):
        low = self
        high = other
        diff = 0
        if(other.start < self.start):
            low, high = other, self

        diff = high.min - low.max
        return diff


class Solution:
    def findBucket(self, bucketSize, lowest, number):
        D = bucketSize+1
        if D==0:
            raise AssertionError
        return (number-lowest)//D

    def maxDiffUnsorted(self, A):
        lowest = min(i for i in A)
        highest = max(i for i in A)
        if lowest == highest:
            return 0  # no solution
        N = len(A)
        bucketCount = 8 # math.floor(math.log2(N))+1
        bucketSize = math.ceil((highest-lowest+1)//bucketCount)
        
        buckets = ([bucket(x,y) for (x,y) in 
                zip(
                    [x for x in range(lowest,highest+1,bucketSize+1)],
                    [y for y in range(lowest+bucketSize,highest+bucketSize+1,bucketSize+1)])
                    ]
                    )
        maxDiff = -1
        # iter over numbers and put them into buckets
        for n in A:
            bucketIndex = self.findBucket(bucketSize,lowest,n)
            buckets[bucketIndex].add(n)
        
        sumc=0
        for b in buckets:
            sumc = sumc + b.count
        
        if sumc != len(A):
            raise IndexError()
        
        prevBucketMax = -1
        for b in buckets:
            if b.count<=0:
                continue
            crossBucketDiff = -1
            if prevBucketMax>0:
                crossBucketDiff = b.min - prevBucketMax
            bucketDiff = b.max - b.min
            maxDiff = max (maxDiff,bucketDiff,crossBucketDiff)
            prevBucketMax = b.max
        
        return maxDiff

s = Solution()
A = [ 80046388, 33032398, 58302830, 51500816, 14472855, 80980490, 95213050, 80169795, 26062824, 69371284, 7321107, 20331687, 50703886, 27052048, 61498101, 72215471, 13937424, 70550839, 4749169, 39931950, 27630535, 48086297, 17107335, 37714153, 43544667, 52745703, 70849038, 50313711, 83130521, 31958912, 75788405, 5995803, 12386985, 51289798, 84540444, 34915899, 56554501, 36992504, 11599361, 6991956, 3562523, 93248786, 67131897, 53350687, 97886180, 8933696, 72240223, 31319710, 49834227, 38192631, 10808091, 62942283, 42566627, 1718021, 42056464, 39022889, 71655571, 57910047, 56725211, 83822359, 22261943, 80261773, 25828845, 31853525, 35239055, 50272585, 78642862, 32703657, 80489917, 48484071, 73326989, 16726696, 11466664, 10954147, 3809204, 49135192, 99603800, 52664203, 41540763, 49663215, 11477594, 98165368, 23072806, 37577176, 80459031, 49687468, 22608476, 43821853, 8046667, 50221124, 1830280, 93217385, 81972804, 98051405, 31365202, 43119514, 12552086, 90566213, 78284073, 56895430, 9117000, 67835523, 58568322, 28429832, 71778562, 94329825, 34605373, 21979180, 6037638, 28790807, 9517423, 87505897, 32779525, 20027301, 91382169, 98757839, 7592003, 90221020, 30983818, 70763434, 79355329, 39028332, 51228517, 74895076, 36108384, 91601472, 93126777, 62634859, 37071377, 64543693, 28269531, 99892770, 63421341, 67061758, 38801849, 5495360, 74582384, 41313991, 57088615, 19025781, 80688925, 1754944, 74528880, 42072263, 91273705, 18400905, 3908673, 18921959, 61556397, 80697586, 38923527, 57558928, 67229160, 44076992, 76010014, 45383238, 83951309, 74252900, 44751922, 12216954, 25644162, 63462436, 81560533, 10088227, 57486761, 10198882, 66270988, 38118474, 16821172, 6346218, 55850238, 5650544, 89168000, 55343368, 81507175, 94371344, 93328403, 7390105, 24100582, 65126608, 10196816, 44830703, 68501175, 33953783, 28428684, 88206791, 27803101, 19848389, 99679878, 68405236, 80898212, 76644039, 52115623, 15002002, 96327086, 19017538, 58942512, 33006001, 78925786, 18030563, 62630418, 38616380, 74888327, 32450207, 94043240, 46525948, 53728612, 95313159, 10331978, 71150079, 63948146, 63350759, 31784442, 55232097, 53972992, 4129814, 3573365, 12568367, 8320489, 44097207, 64769161, 77247982, 51884412, 7212331, 76715189, 75259494, 23316902, 33223799, 56397033, 813388, 24166937, 87376515, 10626031, 36500666, 52006371, 54988528, 50389970, 13821176, 57232928, 1896858, 54178051, 18491046, 63027969, 2995628, 88966485, 78866323, 27032766, 57729926, 51724679, 83346424, 45368940, 40134112, 13606287, 69262042, 55872547, 7923728, 6278466, 76533576, 66862739, 36487030, 33358252, 46985136, 89763584, 31416132, 2610735, 30308821, 36181269, 70471442, 34601125, 79284287, 99530507, 24339463, 71749304, 40302000, 28425054, 94985427, 41080484, 19106916, 80047535, 30630206, 74943624, 53430042, 28094954, 51734287, 63757057, 38288386, 16651665, 30116248, 25410684, 12685163, 83218416, 29514576, 80604280, 26610076, 40002973, 85738004, 92969776, 40566167, 85220084, 69826080, 79312001, 85624104, 66744921, 12200395, 69776737, 11530691, 10871046, 86826298, 68481766, 77670055, 28404914, 44584892, 76242501, 95536334, 47337932, 64847460, 45735628, 47325410, 62787050, 47461867, 80034959, 36059062, 59135907, 76520917, 45706082, 38838233, 20511959, 43583876, 11731366, 69719500, 39016299, 40593042, 13093099, 42442758, 35123431, 67746641, 47934860, 39693722, 8927567, 19611184, 24736425, 19207807, 87630127, 35518107, 99837324, 19632864, 92622896, 5521301, 54692280, 66317128, 29011720, 90336833, 6154152, 63373068, 43829892, 34761296, 27305348, 3439508, 43904791, 20914610, 73374425, 34287947, 58152582, 54837350, 2519902, 37879260, 87808057, 98808369, 67381846, 79580635, 85284049, 39386408, 42379174, 46162744, 13489746, 46133547, 34683322, 50997000, 61962463, 78416173, 33127194, 59936046, 52838185, 58781388, 97669112, 64035958, 39207043, 64743133, 15980276, 22586363, 70033373, 27709360, 88316338, 14454461, 51528133, 7177050, 58556890, 31406075, 25185892, 46367001, 5974920, 94993780, 68186378, 41638609, 16600625, 6487638, 85212531, 64562630, 54940534, 55662367, 58488207, 41328229, 99897392, 11026630, 33938540, 43538340, 17706571, 51350971, 77098963, 89919593, 97578904, 20584281, 11616083, 74755633, 29441397, 1679185, 94225945, 81672791, 17112832, 21705388, 28084031, 46471605, 8173857, 57213495, 82307849, 73418802, 90664319, 39059170, 94713315, 59150683, 50051681, 97974715, 8848996, 21361502, 99239814, 89509997, 77629694, 24867055, 45542749, 57977837, 31794406, 14300201, 35065203, 18423182, 90225767, 90462248, 49726722, 4030275, 81615750, 58424745, 20830620, 37939385, 42448441, 71246410, 6798373, 16279093, 10749585, 88028785, 31023553, 60269400, 96274234, 47527662, 38367877, 71585879, 71178337, 30483508, 48477141, 92577144, 65881974, 37524984, 71056133, 25459949, 53964995, 41022992, 49328161, 85577870, 79157950, 8249929, 35755599, 18077895, 49742498, 72688218, 28852867, 71488820, 82505238, 84060876, 34674446, 18611756, 27523604, 89983783, 10007610, 12329108, 82061770, 3835100, 9559796, 8065752, 33884632, 1783919, 3495925, 63404067, 98417461, 56635719, 9044852, 11124578, 57857461, 56118621, 29793175, 79957934, 12798644, 54917491, 64867955, 57983139, 62889340, 15655539, 34508366, 62881288, 68418020, 31481565, 17761432, 85307353, 7241626, 60679410, 81959450, 40023351, 28231050, 69936291, 50557255, 84917946, 91646141, 72579903, 35581910, 63164207, 20073515, 38786330, 22987706, 95393921, 71209623, 64704154, 77653911, 23485330, 62004479, 4883484, 72320196, 85958054, 1268965, 62413745, 3868118, 96705276, 53110326, 53106147, 66076006, 63044716, 80951746, 49210729, 3501402, 74384983, 17187256, 9647643, 4814680, 64790437, 44605980, 98456563, 15198455, 59025854, 7931169, 27828642, 42094554, 62407831, 5846942, 91551181, 90483454, 46744762, 44765060, 63863852, 73800749, 13091538, 94527210, 65484618, 84819945, 8820669, 82367700, 3149669, 25563792, 30090828, 79247767, 87114289, 98360943, 87808716, 76296806, 77550510, 45015925, 61369503, 66749376, 46466782, 69097916, 92374159, 99661437, 77396326, 92732240, 62194886, 61080997, 55393842, 41731248, 3660963, 59024127, 28524416, 6946781, 96676078, 79173228, 80445541, 94259795, 62497296, 57115417, 94677527, 61172478, 25126963, 40529032, 23994052, 5366857, 7811041, 47924149, 40744968, 30937289, 61424710 ]
maxDiff = s.maxDiffUnsorted(A)

print("Maximum diff is %d" % maxDiff)

B = sorted(A)
idxA =-1
maxi = 0
prev = B[0]
for idx in range(1,len(B)):
    i = B[idx]
    d = i - prev
    if d>maxi:
        idxA = idx
        maxi = d
    prev = i

print("Maxxxx is %d at idx %d" % (maxi, idxA))

